参考博客：https://blog.csdn.net/qq_30277239/article/details/88654892
感谢！！！<br>
## 二叉树<br>
### prac16 递归建树<br>
### prac17 各种遍历方式的模拟以及使用变形，比如求中序的下一个节点<br>
### prac18 层次遍历及其变形<br>
## collect容器数据类型<br>
### ChainMap对象
可以用来合并两个字典的映射<br>

    >>> from collections import ChainMap
    >>> baseline = {'music': 'bach', 'art': 'rembrandt'}
    >>> adjustments = {'art': 'van gogh', 'opera': 'carmen'}
    >>> list(ChainMap(adjustments, baseline))
    ['music', 'art', 'opera']
### Counter对象
提供计数的计数器<br>
纠结交互模式下的多行输入了好久，最后发现顺其自然敲就好了<br>

    >>> from collections import Counter
    >>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
    ...      cnt[word] += 1
    ...
    >>> cnt
    Counter({'blue': 6, 'red': 4, 'green': 2})

返回一个列表，提供 n 个频率最高的元素和计数<br>

    >>> Counter('abracadabra').most_common(3)
    [('a', 5), ('b', 2), ('r', 2)]
    
### deque对象
    
    >>> from collections import deque
    >>> d = deque('ghi')
    >>> for elem in d:
    ...     print(elem.upper())
    ...
    G
    H
    I
    >>> d.append('j')
    >>> d.appendleft('p')
    >>> d
    deque(['p', 'g', 'h', 'i', 'j'])
    >>> list(reversed(d))
    ['j', 'i', 'h', 'g', 'p']
    >>> d.extend('jkl')
    >>> d
    deque(['p', 'g', 'h', 'i', 'j', 'j', 'k', 'l'])
不可以从空队列中弹出元素

    >>> d.clear()
    >>> d
    deque([])
    >>> d.pop()
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    IndexError: pop from an empty deque
### defaultdict
将序列作为键值对加入字典

    >>> from collections import defaultdict
    >>> d = defaultdict(list)
    >>> d
    defaultdict(<class 'list'>, {})
    >>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
    >>> for k,v in s:
    ...     d[k].append(v)
    ...
    >>> sorted(d.items())
    [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]

在 Python 中如果使用 Queue 结构，但因为它是为多线程之间安全交换而设计的，所以使用了锁，会导致性能不佳。因此在 Python 中可以使用 **deque** 的 **append() 和 popleft()** 函数来快速实现队列的功能。<br>
### prac19 之字形打印二叉树，通过迭代的方式，并设置标志位<br>
### prac20 二叉树的序列化以及反序列化，序列化中采用先序遍历方式<br>





